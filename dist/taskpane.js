/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/taskpane/taskpane.js":
/*!**********************************!*\
  !*** ./src/taskpane/taskpane.js ***!
  \**********************************/
/***/ (() => {

eval("/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n * See LICENSE in the project root for license information.\r\n */\r\n\r\n/* global document, Office, Word */\r\n\r\nOffice.onReady((info) => {\r\n    if (info.host === Office.HostType.Word) {\r\n        document.getElementById(\"insert-text\").onclick = insertText;\r\n        document.getElementById(\"get-selection\").onclick = getSelectedText;\r\n        document.getElementById(\"format-text\").onclick = formatSelectedText;\r\n        document.getElementById(\"insert-table\").onclick = insertTable;\r\n        document.getElementById(\"get-document-info\").onclick = getDocumentInfo;\r\n    }\r\n});\r\n\r\n/**\r\n * Inserts sample text into the document\r\n */\r\nasync function insertText() {\r\n    try {\r\n        await Word.run(async (context) => {\r\n            // Insert text at the end of the document\r\n            const body = context.document.body;\r\n            body.insertText(\"Hello from Word Integration Add-in! This text was inserted using Office.js APIs.\", Word.InsertLocation.end);\r\n            \r\n            // Sync the context to execute the API calls\r\n            await context.sync();\r\n            \r\n            showResult(\"Text inserted successfully!\", \"success\");\r\n        });\r\n    } catch (error) {\r\n        showResult(`Error: ${error.message}`, \"error\");\r\n    }\r\n}\r\n\r\n/**\r\n * Gets the currently selected text\r\n */\r\nasync function getSelectedText() {\r\n    try {\r\n        await Word.run(async (context) => {\r\n            // Get the current selection\r\n            const selection = context.document.getSelection();\r\n            selection.load(\"text\");\r\n            \r\n            await context.sync();\r\n            \r\n            if (selection.text) {\r\n                showResult(`Selected text: \"${selection.text}\"`, \"success\");\r\n            } else {\r\n                showResult(\"No text is currently selected.\", \"success\");\r\n            }\r\n        });\r\n    } catch (error) {\r\n        showResult(`Error: ${error.message}`, \"error\");\r\n    }\r\n}\r\n\r\n/**\r\n * Formats the selected text with bold and blue color\r\n */\r\nasync function formatSelectedText() {\r\n    try {\r\n        await Word.run(async (context) => {\r\n            // Get the current selection\r\n            const selection = context.document.getSelection();\r\n            \r\n            // Check if there's a selection\r\n            selection.load(\"text\");\r\n            await context.sync();\r\n            \r\n            if (!selection.text) {\r\n                showResult(\"Please select some text first.\", \"error\");\r\n                return;\r\n            }\r\n            \r\n            // Apply formatting\r\n            selection.font.bold = true;\r\n            selection.font.color = \"#0078d4\"; // Microsoft blue\r\n            selection.font.size = 14;\r\n            \r\n            await context.sync();\r\n            \r\n            showResult(\"Selected text formatted successfully!\", \"success\");\r\n        });\r\n    } catch (error) {\r\n        showResult(`Error: ${error.message}`, \"error\");\r\n    }\r\n}\r\n\r\n/**\r\n * Inserts a simple table\r\n */\r\nasync function insertTable() {\r\n    try {\r\n        await Word.run(async (context) => {\r\n            // Insert a table at the end of the document\r\n            const body = context.document.body;\r\n            const table = body.insertTable(3, 3, Word.InsertLocation.end, [\r\n                [\"Header 1\", \"Header 2\", \"Header 3\"],\r\n                [\"Row 1, Col 1\", \"Row 1, Col 2\", \"Row 1, Col 3\"],\r\n                [\"Row 2, Col 1\", \"Row 2, Col 2\", \"Row 2, Col 3\"]\r\n            ]);\r\n            \r\n            // Format the header row\r\n            const headerRow = table.rows.getFirst();\r\n            headerRow.font.bold = true;\r\n            headerRow.font.color = \"white\";\r\n            headerRow.cells.items.forEach(cell => {\r\n                cell.body.paragraphs.getFirst().alignment = Word.Alignment.centered;\r\n            });\r\n            \r\n            // Set table style\r\n            table.styleFirstColumn = false;\r\n            table.styleBandedRows = true;\r\n            table.style = \"Grid Table 4 - Accent 1\";\r\n            \r\n            await context.sync();\r\n            \r\n            showResult(\"Table inserted successfully!\", \"success\");\r\n        });\r\n    } catch (error) {\r\n        showResult(`Error: ${error.message}`, \"error\");\r\n    }\r\n}\r\n\r\n/**\r\n * Gets basic information about the document\r\n */\r\nasync function getDocumentInfo() {\r\n    try {\r\n        await Word.run(async (context) => {\r\n            // Get document properties\r\n            const doc = context.document;\r\n            const body = doc.body;\r\n            const paragraphs = body.paragraphs;\r\n            const tables = body.tables;\r\n            \r\n            // Load properties\r\n            paragraphs.load(\"items\");\r\n            tables.load(\"items\");\r\n            body.load(\"text\");\r\n            \r\n            await context.sync();\r\n            \r\n            const info = {\r\n                paragraphCount: paragraphs.items.length,\r\n                tableCount: tables.items.length,\r\n                characterCount: body.text.length,\r\n                wordCount: body.text.split(/\\s+/).filter(word => word.length > 0).length\r\n            };\r\n            \r\n            const infoHtml = `\r\n                <strong>Document Statistics:</strong><br>\r\n                • Paragraphs: ${info.paragraphCount}<br>\r\n                • Tables: ${info.tableCount}<br>\r\n                • Characters: ${info.characterCount}<br>\r\n                • Words: ${info.wordCount}\r\n            `;\r\n            \r\n            showResult(infoHtml, \"success\");\r\n        });\r\n    } catch (error) {\r\n        showResult(`Error: ${error.message}`, \"error\");\r\n    }\r\n}\r\n\r\n/**\r\n * Shows result in the result section\r\n * @param {string} message - The message to display\r\n * @param {string} type - The type of message (success, error)\r\n */\r\nfunction showResult(message, type) {\r\n    const resultDiv = document.getElementById(\"result\");\r\n    const resultContent = document.getElementById(\"result-content\");\r\n    \r\n    resultDiv.style.display = \"block\";\r\n    resultContent.innerHTML = message;\r\n    resultContent.className = type;\r\n    \r\n    // Auto-hide after 5 seconds for success messages\r\n    if (type === \"success\") {\r\n        setTimeout(() => {\r\n            resultDiv.style.display = \"none\";\r\n        }, 5000);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://word-integration-addin/./src/taskpane/taskpane.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/taskpane/taskpane.js"]();
/******/ 	
/******/ })()
;